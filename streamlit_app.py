# =========================================================
# üå± Seed of Tomorrow /Êú™‰æÜ‰πãÁ®ÆÔºöAI+ÁúüËèå Ê∑®Èõ∂ÂüéÂ∏ÇÊ≤ªÁêÜÂπ≥Âè∞
# =========================================================
# ÈÄöÁî®Ê®πÁ®ÆÂàÜÊûêÔºàGeneralÔºâ+ Êú¨Ê¨°ËÅöÁÑ¶ÔºàSpecialization / Ê°à‰æãÔºöÈªëÊùøÊ®πÔºâ
# - ÂΩ±ÂÉèÂàÜÊûêÔºàÈõ≤Á´ØÂÆâÂÖ®ÔºöPillow+NumPy ÂïüÁôºÂºèÔºå‰∏çÁî® OpenCV/TorchÔºâ
# - Áâ©Á®ÆÊ®°ÂºèÔºàÈÄöÁî®/ËÅöÁÑ¶ÔºâÔºã Ê®πÁ®ÆË≥áÊñôÂ∫´ÔºàÂ∏∏Ë¶ãÁóÖÂÆ≥ËàáÂª∫Ë≠∞ÁúüËèåÔºâ
# - ÁîüÁâ©Ë≥áÊùêÁü•Ë≠òÂ∫´ÔºàÊ∑∑ÈÖçÁ¶ÅÂøå„ÄÅËº™ÊõøË¶èÂâá„ÄÅÊñΩÁî®Ê≥®ÊÑèÔºâ
# - ÂäëÈáè/Â∑•ÊôÇ‰º∞ÁÆóÔºà‰æùËÉ∏Âæë/Ê®πÂÜ†/Âö¥ÈáçÂ∫¶Ôºâ
# - Âú∞ÁêÜËº∏ÂÖ•ÔºöÂú∞ÂùÄÊêúÂ∞ã / Âú∞ÂúñÈªûÈÅ∏ / ÊâãÂãïÂ∫ßÊ®ô
# - OSM Ê®πÈªû/Âª∫Áâ©ÁñäÂä†„ÄÅÂåóÂ±ØÁ§∫ÁØÑÊ®πÂàó
# - ÂÑÄË°®Êùø + ÊîøÂ∫úÁ´ØÁ∏ΩË¶Ω
# =========================================================

import streamlit as st
import pandas as pd
import numpy as np
from PIL import Image
from datetime import datetime
import requests
import folium
from streamlit_folium import st_folium
import overpy
import plotly.graph_objects as go

# ---------------------------------------------------------
# PAGE CONFIG / È†ÅÈù¢Ë®≠ÂÆö
# ---------------------------------------------------------
st.set_page_config(page_title="Seed of Tomorrow / Êú™‰æÜ‰πãÁ®Æ", page_icon="üå±", layout="wide")
st.title("üå± Seed of Tomorrow / Êú™‰æÜ‰πãÁ®Æ")
st.caption("Ë°°ÁïåÔΩúAI √ó ÁúüËèå √ó ÂÖ¨Ê∞ëÁßëÂ≠∏ÔΩúAI + Mycology + Citizen Science for Climate-Ready Cities")

# ---------------------------------------------------------
# CLASS LABELS / È°ûÂà•
# ---------------------------------------------------------
CLASSES_EN = ["Healthy", "Deadwood", "Pest Damage", "Soil Issue"]
CLASSES_ZH = ["ÂÅ•Â∫∑", "ÊûØÊú®", "Ëü≤ÂÆ≥", "ÂúüÂ£§ÂïèÈ°å"]
CLASS_BI = dict(zip(CLASSES_EN, CLASSES_ZH))

# ---------------------------------------------------------
# SPECIES LIBRARY / Ê®πÁ®ÆË≥áÊñôÔºàÈÄöÁî®ÔºãÊú¨Ê¨°ËÅöÁÑ¶Ôºâ
# ---------------------------------------------------------
SPECIES_LIBRARY = {
    "Blackboard Tree (Alstonia scholaris) / ÈªëÊùøÊ®π": {
        "key": "blackboard",
        "diseases": [
            ("Root Rot (Fungal) / Ê†πËÖêÁóÖ", "Trichoderma harzianum", "Soil drench + mulch / ÂúüÂ£§ÁÅåÊ≥®ÔºãË¶ÜËìã"),
            ("Scale Insects / ‰ªãÊÆºËü≤", "Beauveria bassiana", "Targeted biological spray / ÁîüÁâ©ÊÄßÂô¥ÊñΩ"),
            ("Drought/Soil Stress / ‰πæÊó±/ÂúüÂ£§ÈÄÜÂ¢É", "Mycorrhizae", "Inoculation + organic matter / Êé•Á®ÆÔºãÊúâÊ©üË≥™")
        ],
        # bias ÂÉÖÂú® Specialization Ê®°Âºè‰∏ãÂæÆË™øÂàÜÈ°ûÂÇæÂêëÔºàËøëÁïåÂÄºÊôÇÔºâ
        "bias": {"Pest Damage": 0.08, "Deadwood": 0.04, "Soil Issue": 0.03}
    },
    "Banyan (Ficus microcarpa) / Ê¶ïÊ®π": {
        "key": "banyan",
        "diseases": [
            ("Gall Wasp / Áò§ËúÇ", "Beauveria", "Prune + bio-spray"),
            ("Root Compression / Ê†πÁ≥ªÂèóÂ£ì", "Mycorrhizae", "Soil decompaction"),
            ("Sooty Mold / ÁÖ§Ê±°ÁóÖ", "Beauveria", "Insect control + wash")
        ],
        "bias": {"Pest Damage": 0.06, "Soil Issue": 0.05}
    },
    "Formosan Sweetgum (Liquidambar formosana) / Ê•ìÈ¶ô": {
        "key": "sweetgum",
        "diseases": [
            ("Leaf Spot / ËëâÊñëÁóÖ", "Trichoderma", "Prune + sanitation"),
            ("Borer Damage / Â§©ÁâõËõÄÂ≠î", "Beauveria", "Targeted bio-spray"),
            ("Drought Stress / ‰πæÊó±ÈÄÜÂ¢É", "Mycorrhizae", "Mulch + inoculation")
        ],
        "bias": {"Pest Damage": 0.05, "Soil Issue": 0.05}
    }
}

def species_notes_md(species_name: str) -> str:
    items = SPECIES_LIBRARY.get(species_name, {}).get("diseases", [])
    if not items:
        return "_(No disease notes yet / Â∞öÁÑ°Ë≥áÊñô)_"
    lines = []
    for name, fungi, action in items:
        lines.append(f"- **{name}** ‚Äî Fungi: **{fungi}** ÔΩú Action: **{action}**")
    return "\n".join(lines)

# ---------------------------------------------------------
# BIO-AGENTS KNOWLEDGE BASE / ÁîüÁâ©Ë≥áÊùêÁü•Ë≠òÂ∫´ÔºàÊ∑∑ÈÖçÁ¶ÅÂøå/Ëº™Êõø/Ê≥®ÊÑèÔºâ
# ---------------------------------------------------------
BIO_AGENTS = {
    "Trichoderma": {
        "zh": "Êú®Èª¥ËèåÔºàTrichodermaÔºâ",
        "target": ["Deadwood","Soil Issue","Root Rot"],
        "form": "Soil drench / ÂúüÂ£§ÁÅåÊ≥®",
        "base_l_per_tree": 3.0,   # ‰ª• 30cm ËÉ∏Âæë„ÄÅ8m Ê®πÂÜ†ÁÇ∫Âü∫Ê∫ñ
        "mix_avoid": ["Bacillus", "EM", "Copper", "Strong-alkali"],
        "notes": "Avoid waterlogging; mulch after drench / ÈÅøÂÖçÁ©çÊ∞¥ÔºåÁÅåÂæåË¶ÜËìãÊúâÊ©üË≥™"
    },
    "AMF": {
        "zh": "ËèåÊ†πËèåÔºàAMFÔºâ",
        "target": ["Soil Issue","Drought Stress"],
        "form": "Inoculation + compost / Êé•Á®ÆÔºãÊúâÊ©üË≥™",
        "base_l_per_tree": 2.0,
        "mix_avoid": ["Copper", "Strong-alkali"],
        "notes": "Loosen soil; water-in / È¨ÜÂúüÊàêÁí∞‰∏¶ÂÖÖÂàÜÁÅåÊ∞¥"
    },
    "Beauveria": {
        "zh": "ÁôΩÂÉµËèåÔºàBeauveria bassianaÔºâ",
        "target": ["Pest Damage"],
        "form": "Targeted spray / ÁõÆÊ®ôÂô¥ÊñΩ",
        "base_ml_per_tree": 200,
        "rotation": ["Metarhizium"],
        "mix_avoid": ["Bacillus","EM","Copper","Strong-alkali"],
        "notes": "Evening spray; keep humidity / ÂÇçÊôöÂô¥Ôºå‰øùÊåÅÊøïÂ∫¶"
    },
    "Metarhizium": {
        "zh": "Á∂†ÂÉµËèåÔºàMetarhizium anisopliaeÔºâ",
        "target": ["Pest Damage"],
        "form": "Targeted spray / ÁõÆÊ®ôÂô¥ÊñΩ",
        "base_ml_per_tree": 220,
        "rotation": ["Beauveria"],
        "mix_avoid": ["Bacillus","EM","Copper","Strong-alkali"],
        "notes": "Evening spray; avoid direct sun / ÂÇçÊôöÂô¥ÔºåÈÅøÁÉàÊó•"
    },
    "Bacillus": {
        "zh": "ÊûØËçâÊ°øËèåÔºàBacillus subtilisÔºâ",
        "target": ["Leaf Fungus","General Sanitation"],
        "form": "Foliage spray / ËëâÈù¢Âô¥ÊñΩ",
        "base_ml_per_tree": 180,
        "mix_avoid": ["Trichoderma","AMF","Beauveria","Metarhizium","EM","Copper","Strong-alkali"],
        "notes": "Do not co-apply with live fungi / ‰∏çËàáÊ¥ªÊÄßÁúüËèåÂêåÊôÇ‰ΩøÁî®"
    },
    "EM": {
        "zh": "EM Ë§áÂêàËèå",
        "target": ["Soil Conditioner","Decomposition"],
        "form": "Soil drench / ÂúüÂ£§ÁÅåÊ≥®",
        "base_l_per_tree": 2.5,
        "mix_avoid": ["Copper","Strong-alkali","Beauveria","Metarhizium"],
        "notes": "Conditioner; not a specific pesticide / ÂúüÂ£§Ë™øÁêÜÔºåÈùûÂ∞à‰∏ÄÈò≤Ê≤ª"
    }
}

def choose_agent(pred_label_en: str):
    if pred_label_en in ["Deadwood","Soil Issue"]:
        return "Trichoderma" if pred_label_en=="Deadwood" else "AMF"
    if pred_label_en == "Pest Damage":
        return "Beauveria"   # ÂèØÂú® UI È°ØÁ§∫Ëº™Êõø Metarhizium
    return None

# ---------------------------------------------------------
# TAIWAN city -> districts / Âè∞ÁÅ£ÂüéÂ∏ÇËàáË°åÊîøÂçÄ
# ---------------------------------------------------------
TAIWAN_DIVISIONS = {
    "Taipei City": ["Zhongzheng","Datong","Zhongshan","Songshan","Da‚Äôan","Wanhua","Xinyi","Shilin","Beitou","Neihu","Nangang","Wenshan"],
    "New Taipei City": ["Banqiao","Sanchong","Zhonghe","Yonghe","Xinzhuang","Xindian","Tucheng","Luzhou","Xizhi","Shulin","Yingge","Sanxia","Danshui","Ruifang","Taishan","Wugu","Linkou","Bali","Pingxi","Shuangxi","Gongliao","Jinshan","Wanli","Shenkeng","Shiding","Pinglin","Sanzhi","Shimen","Ulay"],
    "Taichung City": ["Central","East","South","West","North","Beitun","Xitun","Nantun","Taiping","Dali","Wufeng","Wuri","Fengyuan","Dongshi","Heping","Tanzi","Daya","Shengang","Dadu","Shalu","Longjing","Wuqi","Qingshui","Dajia","Waipu","Da‚Äôan"],
    "Tainan City": ["West Central","East","South","North","Anping","Annan","Yongkang","Guiren","Xinshih","Rende","Guanmiao","Longqi","Guantian","Madou","Jiali","Xuejia","Beimen","Xigang","Qigu","Jiangjun","Xinhua","Shanshang","Zuozhen","Yujing","Nanxi","Nanhua","Anding","Liuying","Liujia","Dongshan","Baihe","Houbi"],
    "Kaohsiung City": ["Xinxing","Qianjin","Lingya","Yancheng","Gushan","Qijin","Qianzhen","Sanmin","Nanzi","Xiaogang","Zuoying","Renwu","Dashe","Gangshan","Luzhu","Alian","Tianliao","Yanchao","Qiaotou","Ziguan","Mituo","Yong‚Äôan","Hunei","Fengshan","Daliao","Linyuan","Niaosong","Dashu","Qishan","Meinong","Liugui","Neimen","Shanlin","Jiaxian","Taoyuan","Namaxia","Maolin","Qieding"],
    "Taoyuan City": ["Taoyuan","Zhongli","Pingzhen","Bade","Yangmei","Luzhu","Guishan","Longtan","Dayuan","Xinwu","Guanyin","Fuxing"],
    "Hsinchu City": ["East","North","Xiangshan"],
    "Keelung City": ["Ren‚Äôai","Xinyi","Zhongzheng","Zhongshan","Anle","Nuannuan","Qidu"],
    "Hsinchu County": ["Zhubei","Zhudong","Xinpu","Hukou","Xinfeng","Guansi","Qionglin","Baoshan","Beipu","Emei","Jianshi","Wufeng"],
    "Miaoli County": ["Miaoli","Toufen","Zhunan","Houlong","Tongxiao","Tongluo","Sanyi","Zaoqiao","Yuanli","Gongguan","Touwu","Nanzhuang","Shitan","Dahu","Sanwan","Tai‚Äôan"],
    "Changhua County": ["Changhua","Yuanlin","Lukang","Hemei","Fuxing","Xiushui","Huatan","Fenyuan","Dacun","Puyan","Xihu","Pitou","Beidou","Ershui","Tianzhong","Tianwei","Xizhou","Fangyuan","Dacheng","Erlin"],
    "Nantou County": ["Nantou","Caotun","Zhushan","Jiji","Puli","Yuchi","Guoxing","Ren‚Äôai","Mingjian","Lugu","Shuili","Xinyi"],
    "Yunlin County": ["Douliu","Huwei","Dounan","Erlun","Lunbei","Mailiao","Taixi","Sihu","Kouhu","Tuku","Baozhong","Dongshi","Shuilin","Gukeng","Citong","Linnei","Beigang"],
    "Chiayi City": ["East","West"],
    "Chiayi County": ["Taibao","Puzi","Minxiong","Xikou","Dalun","Budai","Dongshi","Liujiao","Yizhu","Lucao","Zhongpu","Fanlu","Alishan","Meishan","Shuishang"],
    "Yilan County": ["Yilan","Jiaoxi","Toucheng","Luodong","Su‚Äôao","Nan‚Äôao","Dongshan","Sanxing","Datong","Zhuangwei","Wujie"],
    "Hualien County": ["Hualien","Ji‚Äôan","Shoufeng","Fuli","Yuli","Fenglin","Fengbin","Ruisui","Guangfu","Zhuoxi","Xincheng"],
    "Taitung County": ["Taitung","Luye","Beinan","Guanshan","Chishang","Taimali","Dawu","Chenggong","Changbin","Donghe","Haiduan","Lanyu","Ludao"],
    "Pingtung County": ["Pingtung","Chaozhou","Donggang","Fangliao","Hengchun","Manzhou","Checheng","Mudan","Sandimen","Wutai","Majia","Taiwu","Laiyi","Linbian","Nanzhou","Jiadong","Xinyuan","Kanding","Ligang","Gaoshu","Wanluan"],
    "Penghu County": ["Magong","Huxi","Baisha","Xiyu","Wang‚Äôan","Qimei"],
    "Kinmen County": ["Jincheng","Jinsha","Jinning","Jinhu","Lieyu","Wuqiu"],
    "Lienchiang County": ["Nangan","Beigan","Juguang","Dongyin"]
}

# ---------------------------------------------------------
# SESSION DB / ÂÖßÈÉ®Ë≥áÊñôÂ∫´
# ---------------------------------------------------------
if "db" not in st.session_state:
    st.session_state.db = pd.DataFrame(columns=[
        "timestamp","reporter","city","district","tree_id","status_en","status_zh","confidence",
        "diameter_cm","canopy_m","action_bi","co2_saved_kg","treated","treated_ts","lat","lon",
        "species"
    ])

# ---------------------------------------------------------
# GEO UTILS / Âú∞ÁêÜÂ∑•ÂÖ∑
# ---------------------------------------------------------
def geocode_address(query: str):
    """Nominatim Âú∞ÁêÜÁ∑®Á¢º / Geocode -> (lat, lon, display_name)"""
    if not query or not query.strip():
        return None, None, None
    url = "https://nominatim.openstreetmap.org/search"
    params = {"q": query, "format": "json", "limit": 1}
    headers = {"User-Agent": "Seed-of-Tomorrow-demo"}
    try:
        r = requests.get(url, params=params, headers=headers, timeout=12)
        r.raise_for_status()
        data = r.json()
        if not data:
            return None, None, None
        return float(data[0]["lat"]), float(data[0]["lon"]), data[0]["display_name"]
    except Exception:
        return None, None, None

@st.cache_data(show_spinner=False, ttl=3600)
def get_bbox_for(city: str, district: str):
    """Auto-bbox via NominatimÔºõËã•Â§±ÊïóÂõûÈÄÄË•øÂ±ØÂçÄÁØÑÂúç"""
    q = f"{district}, {city}, Taiwan"
    url = "https://nominatim.openstreetmap.org/search"
    headers = {"User-Agent": "Seed-of-Tomorrow-demo"}
    params = {"q": q, "format": "json", "limit": 1}
    try:
        r = requests.get(url, params=params, headers=headers, timeout=12)
        r.raise_for_status()
        data = r.json()
        if data and "boundingbox" in data[0]:
            south, north, west, east = map(float, data[0]["boundingbox"])
            return (south, west, north, east)
    except Exception:
        pass
    try:
        params["q"] = f"{city}, Taiwan"
        r2 = requests.get(url, params=params, headers=headers, timeout=12)
        r2.raise_for_status()
        d2 = r2.json()
        if d2 and "boundingbox" in d2[0]:
            south, north, west, east = map(float, d2[0]["boundingbox"])
            return (south, west, north, east)
    except Exception:
        pass
    return (24.168, 120.595, 24.206, 120.640)  # Taichung Xitun fallback

@st.cache_data(show_spinner=False, ttl=600)
def fetch_osm_trees_buildings(bbox):
    """Overpass ÊäìÂèñ OSM Ê®πÈªûËàáÂª∫Áâ©"""
    south, west, north, east = bbox
    api = overpy.Overpass()
    q_trees = f'node["natural"="tree"]({south},{west},{north},{east}); out center 200;'
    q_build = f'way["building"]({south},{west},{north},{east}); (._;>;); out body 200;'
    trees = api.query(q_trees)
    builds = api.query(q_build)
    building_polys = []
    for way in builds.ways:
        coords = [(float(n.lat), float(n.lon)) for n in way.nodes]
        if len(coords) >= 3:
            building_polys.append(coords)
    return trees.nodes, building_polys

def add_tile_layers(m):
    """Base maps with explicit URLs + attributionsÔºàÈÅøÂÖç folium ÁÑ°Ê≠∏Â±¨Â†±ÈåØÔºâ"""
    folium.TileLayer(
        tiles="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
        name="OSM Standard", attr="¬© OpenStreetMap contributors"
    ).add_to(m)
    folium.TileLayer(
        tiles="https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png",
        name="Carto Light", attr="¬© OpenStreetMap contributors, ¬© CartoDB"
    ).add_to(m)
    folium.TileLayer(
        tiles="https://stamen-tiles.a.ssl.fastly.net/terrain/{z}/{x}/{y}.jpg",
        name="Terrain", attr="Map tiles by Stamen Design (CC BY 3.0) ‚Äî Data ¬© OpenStreetMap"
    ).add_to(m)
    folium.TileLayer(
        tiles="https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png",
        name="OpenTopoMap", attr="¬© OpenTopoMap (CC-BY-SA) ‚Äî ¬© OpenStreetMap"
    ).add_to(m)
    folium.TileLayer(
        tiles="https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png",
        name="Dark Mode", attr="¬© OpenStreetMap contributors, ¬© CartoDB"
    ).add_to(m)
    folium.LayerControl(collapsed=False).add_to(m)
    return m

# ---------------------------------------------------------
# AI HEURISTIC / ÂΩ±ÂÉèÂïüÁôºÂºèÔºàÂèØÈÄöÁî®ÔºõSpecialization ÂÉÖÂæÆË™øÔºâ
# ---------------------------------------------------------
def pseudo_ai_predict(image: Image.Image, species_name: str, mode: str):
    """
    Prototype heuristic (color/brightness) ‚Üí 4 classes.
    General: species-independent rules.
    Specialization: small species bias near boundary decisions.
    Returns: (label_en, confidence%, probs_dict)
    """
    img = image.convert("RGB").resize((256, 256))
    arr = np.asarray(img).astype(np.float32)
    mean = arr.mean(axis=(0, 1))  # R,G,B
    brightness = arr.mean()
    red, green, blue = mean
    rg = red - green
    gb = green - blue

    # base rules
    high_green = green > 140 and gb > 8 and brightness > 115
    reddish    = rg > 15 and red > 120
    very_dark  = brightness < 85
    mid_wash   = 85 <= brightness <= 110 and abs(rg) < 12

    if high_green:
        pred, base_conf = "Healthy", 0.975
    elif very_dark:
        pred, base_conf = "Deadwood", 0.965
    elif reddish:
        pred, base_conf = "Pest Damage", 0.962
    elif mid_wash:
        pred, base_conf = "Soil Issue", 0.955
    else:
        pred, base_conf = "Soil Issue", 0.925

    # species bias only if specialization mode
    if mode.startswith("Specialization"):
        bias = SPECIES_LIBRARY.get(species_name, {}).get("bias", {})
        if base_conf < 0.965:
            if pred in bias:
                base_conf = min(0.99, base_conf + min(0.01, bias[pred]))
            else:
                for favored, bump in bias.items():
                    if bump >= 0.06 and base_conf < 0.94:
                        pred = favored
                        base_conf = 0.945
                        break

    conf = float(np.clip(np.random.normal(base_conf, 0.008), 0.90, 0.99)) * 100.0
    probs = {c: 0.0 for c in CLASSES_EN}
    probs[pred] = round(conf/100.0, 3)
    rem = max(0.0, 1.0 - probs[pred])
    for c in CLASSES_EN:
        if c != pred:
            probs[c] = round(rem / 3.0, 3)
    return pred, round(conf, 2), probs

# ---------------------------------------------------------
# DOSAGE & WORKLOAD / ÂäëÈáèËàáÂ∑•ÊôÇ‰º∞ÁÆóÔºàÂê´Ê∑∑ÈÖç/Ëº™ÊõøÊèêÁ§∫Ôºâ
# ---------------------------------------------------------
def estimate_treatment_plus(pred_label_en: str, diameter_cm: int, canopy_m: int, severity_pct: float):
    agent_key = choose_agent(pred_label_en)
    if not agent_key:
        return {
            "agent": None, "agent_zh": "‚Äî", "form": "‚Äî",
            "liters_to_drench": 0, "spray_ml": 0, "labor_minutes": 5,
            "notes": "Recheck in 2‚Äì4 weeks / 2‚Äì4 ÈÄ±ÂæåË§áÊü•",
            "warnings": []
        }

    ag = BIO_AGENTS[agent_key]
    stem_factor = max(0.8, min(2.5, diameter_cm / 30.0))
    canopy_factor = max(0.7, min(2.0, canopy_m / 8.0))
    sev = max(0.0, min(1.0, (severity_pct - 90.0) / 9.0))
    severity_factor = 1.0 + 0.35 * sev

    dose_l = ag.get("base_l_per_tree", 0) * stem_factor * canopy_factor * severity_factor
    dose_ml = ag.get("base_ml_per_tree", 0) * canopy_factor * severity_factor
    labor = int((20 if ag["form"].startswith("Soil") else 15) * canopy_factor)

    warnings = []
    if ag.get("mix_avoid"):
        warnings.append("Avoid mixing with: " + ", ".join(ag["mix_avoid"]))
    if ag.get("rotation") and pred_label_en == "Pest Damage":
        warnings.append("Rotation option: " + " / ".join(ag["rotation"]))

    return {
        "agent": agent_key,
        "agent_zh": ag["zh"],
        "form": ag["form"],
        "liters_to_drench": round(dose_l, 1) if dose_l else 0,
        "spray_ml": int(dose_ml) if dose_ml else 0,
        "labor_minutes": labor,
        "notes": ag["notes"],
        "warnings": warnings
    }

# ---------------------------------------------------------
# DEMO GENERATOR / ÂåóÂ±ØÊ®πÂàóÁ§∫ÁØÑ
# ---------------------------------------------------------
def _line_points(lat0, lon0, lat1, lon1, n, jitter=0.00025, seed=42):
    rng = np.random.default_rng(seed)
    lats = np.linspace(lat0, lat1, n) + rng.normal(0, jitter, n)
    lons = np.linspace(lon0, lon1, n) + rng.normal(0, jitter, n)
    return list(zip(lats, lons))

def make_beitun_demo(n_per_line=80, seed=7):
    A = _line_points(24.1825, 120.7050, 24.2025, 120.7055, n_per_line, seed=seed)
    B = _line_points(24.1690, 120.7010, 24.1950, 120.6940, n_per_line, seed=seed+1)
    C = _line_points(24.1665, 120.6900, 24.1885, 120.6780, n_per_line, seed=seed+2)
    pts = A + B + C
    rng = np.random.default_rng(seed+10)

    labels = rng.choice(["Healthy","Pest Damage","Deadwood","Soil Issue"],
                        size=len(pts), p=[0.62,0.20,0.08,0.10])
    confidences = rng.uniform(92, 99, len(pts)).round(2)
    diameters = rng.integers(10, 85, len(pts))
    canopies = rng.integers(3, 18, len(pts))
    treated_mask = rng.random(len(pts)) < 0.35
    co2_map = {"Deadwood":25, "Pest Damage":20, "Soil Issue":15, "Healthy":0}
    now = datetime.utcnow().isoformat(timespec="seconds")

    rows = []
    for i, (lat, lon) in enumerate(pts):
        lab_en = labels[i]
        lab_zh = CLASS_BI[lab_en]
        # ÁÇ∫‰∫ÜÂ∞çÈΩä UI ÁöÑËàäÈ°ØÁ§∫Ôºå‰ªç‰øùÁïô action_bi/CO2 tagÔºàÊºîÁ§∫Áî®Ôºâ
        legacy_action = {
            "Healthy": "Áõ£Ê∏¨Âç≥ÂèØ / Monitoring only",
            "Deadwood": "ÊñΩÁî®ËÖêÁîüÁúüËèå / Apply saprotrophic fungi",
            "Pest Damage": "ÊñΩÁî®ÊòÜËü≤ÁóÖÂéüÁúüËèå / Apply entomopathogenic fungi",
            "Soil Issue": "ÊñΩÁî®ËèåÊ†πÁúüËèå + Á∑©Ë°ùËôïÁêÜ / Apply mycorrhizal fungi + buffer"
        }[lab_en]
        co2_saved = co2_map[lab_en] if treated_mask[i] else 0

        rows.append(dict(
            timestamp=now,
            reporter="DemoSeed",
            city="Taichung City",
            district="Beitun",
            tree_id=f"BT-{10000+i}",
            status_en=lab_en, status_zh=lab_zh,
            confidence=float(confidences[i]),
            diameter_cm=int(diameters[i]), canopy_m=int(canopies[i]),
            action_bi=legacy_action, co2_saved_kg=int(co2_saved),
            treated=bool(treated_mask[i]),
            treated_ts=now if treated_mask[i] else "",
            lat=float(lat), lon=float(lon),
            species="(demo) case-study ready"
        ))
    return pd.DataFrame(rows)

# ---------------------------------------------------------
# TABS / ÂàÜÈ†Å
# ---------------------------------------------------------
tabs = st.tabs([
    "üì∑ Analyze Tree / ÂΩ±ÂÉèÂàÜÊûê",
    "üó∫Ô∏è Map View / Âú∞ÂúñÊ™¢Ë¶ñ",
    "üìä Dashboard / ÂÑÄË°®Êùø",
    "üèõÔ∏è Government Summary / ÊîøÂ∫úÁ´ØÁ∏ΩË¶Ω"
])

# =========================================================
# TAB 1 ‚Äî Analyze Tree / ÂΩ±ÂÉèÂàÜÊûê
# =========================================================
with tabs[0]:
    st.header("üì∑ AI Tree Health Analyzer / Ê®πÊú®ÂÅ•Â∫∑AIÂàÜÊûê")
# ---------------------------------------------------------
# SPECIES MODE / Ê®πÁ®ÆÊ®°Âºè
# ---------------------------------------------------------
st.markdown("### üå≥ Species Mode / Ê®πÁ®ÆÊ®°Âºè")
colS1, colS2 = st.columns([1.2, 2])
with colS1:
    species_mode = st.radio(
        "Mode / Ê®°Âºè",
        ["General (all trees)", "Specialization (case study)"],
        index=0
    )

# In General mode, let user optionally type a species name (for logging only)
if species_mode.startswith("General"):
    species_name = st.text_input(
        "Species (optional) / Ê®πÁ®ÆÔºàÂèØÁïôÁôΩÔºâ",
        value="",
        placeholder="Unknown / Êú™Ê®ôÁ§∫"
    )
    st.caption("General mode uses species-agnostic analysis. Ê®πÁ®ÆÂÉÖ‰ΩúÁÇ∫Á¥ÄÈåÑÁî®„ÄÇ")
else:
    species_name = st.selectbox(
        "Species / Ê®πÁ®Æ",
        list(SPECIES_LIBRARY.keys()),
        index=0
    )
    st.expander("üìö Species notes / Ê®πÁ®ÆË™™Êòé", expanded=False).markdown(
        species_notes_md(species_name)
    )

    # Â∑¶Âè≥Ê¨Ñ
    col_left, col_right = st.columns([3, 2])
    with col_left:
        uploaded = st.file_uploader("Upload tree photo (JPG/PNG) / ‰∏äÂÇ≥Ê®πÊú®ÁÖßÁâá", type=["jpg","jpeg","png"])
        diameter = st.slider("Trunk Diameter (cm) / Ê®πËÉ∏Âæë(ÂÖ¨ÂàÜ)", 5, 150, 35)
        canopy_m = st.slider("Canopy Width (m) / Ê®πÂÜ†ÂπÖ(ÂÖ¨Â∞∫)", 1, 30, 8)
        reporter = st.text_input("Reporter name / ÂõûÂ†±ËÄÖ", "Citizen")

    with col_right:
        city = st.selectbox("City / ÂüéÂ∏Ç", list(TAIWAN_DIVISIONS.keys()), index=2)
        district = st.selectbox("District / Ë°åÊîøÂçÄ", TAIWAN_DIVISIONS[city])

    # ‰ΩçÁΩÆË®≠ÂÆö
    st.markdown("### üìç Location / Â∫ßÊ®ôË®≠ÂÆö")
    bbox = get_bbox_for(city, district)
    center_lat = (bbox[0] + bbox[2]) / 2
    center_lon = (bbox[1] + bbox[3]) / 2

    loc_mode = st.radio("Choose location input mode / ‰ΩçÁΩÆË®≠ÂÆöÊñπÂºè",
                        ["Search Address / Âú∞ÂùÄÊêúÂ∞ã", "Click on Map / Âú∞ÂúñÈªûÈÅ∏", "Enter lat/lon / ÊâãÂãïËº∏ÂÖ•Â∫ßÊ®ô"],
                        horizontal=True)

    lat, lon = center_lat, center_lon
    picked_label = ""

    if loc_mode.startswith("Search"):
        q = st.text_input("Address / Âú∞ÂùÄÔºàÂèØÂê´Âú∞Ê®ôÔºâ")
        if st.button("üîé Geocode / Âú∞ÁêÜÁ∑®Á¢º"):
            glat, glon, name = geocode_address(q)
            if glat and glon:
                lat, lon, picked_label = glat, glon, name
                st.success(f"Found / Â∑≤ÂÆö‰ΩçÔºö{name} ({lat:.6f}, {lon:.6f})")
            else:
                st.error("No match found / Êâæ‰∏çÂà∞ÁµêÊûúÔºåË´ãÂä†‰∏äË°åÊîøÂçÄËàáÂüéÂ∏ÇÂÜçË©¶")
    elif loc_mode.startswith("Click"):
        st.caption("Click the map to place a pin / ÈªûÂú∞ÂúñÊîæÁΩÆÂ∫ßÊ®ô")
        pick_map = folium.Map(location=[center_lat, center_lon], zoom_start=15, control_scale=True)
        add_tile_layers(pick_map)
        pick_out = st_folium(pick_map, width=920, height=420)
        if pick_out and pick_out.get("last_clicked"):
            lat = float(pick_out["last_clicked"]["lat"])
            lon = float(pick_out["last_clicked"]["lng"])
            picked_label = f"Picked / Â∑≤ÈÅ∏Ôºö{lat:.6f}, {lon:.6f}"
            st.success(picked_label)
    else:
        col_ll1, col_ll2 = st.columns(2)
        with col_ll1:
            lat = st.number_input("Latitude / Á∑ØÂ∫¶", value=center_lat, format="%.6f")
        with col_ll2:
            lon = st.number_input("Longitude / Á∂ìÂ∫¶", value=center_lon, format="%.6f")
        picked_label = f"Manual / ÊâãÂãïÔºö{lat:.6f}, {lon:.6f}"

    st.write(f"**Location set to / ÁõÆÂâçÂ∫ßÊ®ôÔºö** {picked_label or f'{lat:.6f}, {lon:.6f}'}")

    # ÂΩ±ÂÉèÂàÜÊûê ‚Üí ÂäëÈáè‰º∞ÁÆó ‚Üí Ë®òÈåÑ
    if uploaded:
        img = Image.open(uploaded).convert("RGB")
        st.image(img, caption="Uploaded Tree / Â∑≤‰∏äÂÇ≥ÁÖßÁâá", use_container_width=True)

        label_en, conf, probs = pseudo_ai_predict(img, species_name, species_mode)
        label_zh = CLASS_BI[label_en]
        st.success(f"Prediction È†êÊ∏¨Ôºö**{label_zh} / {label_en}**ÔºàConfidence ‰ø°ÂøÉÔºö{conf:.2f}%Ôºâ")
        st.bar_chart(pd.DataFrame({"Confidence / ‰ø°ÂøÉ": list(probs.values())},
                                  index=[f"{CLASS_BI[k]} / {k}" for k in probs.keys()]))

        dose = estimate_treatment_plus(label_en, diameter, canopy_m, conf)
        st.subheader("Treatment Estimator / ËôïÁΩÆÂäëÈáè‰º∞ÁÆó")
        st.caption(f"Species / Ê®πÁ®ÆÔºö{species_name}  ÔΩú Mode / Ê®°ÂºèÔºö{species_mode}")
        cA, cB, cC, cD = st.columns(4)
        cA.metric("Agent / Ë≥áÊùê", dose["agent_zh"])
        cB.metric("Soil Drench (L)", dose["liters_to_drench"])
        cC.metric("Spray (mL)", dose["spray_ml"])
        cD.metric("Labor (min)", dose["labor_minutes"])
        st.caption(dose["notes"])
        for w in dose["warnings"]:
            st.warning(w)

        # ËàäÁâà CO2 Ê®ôÁ±§‰øùÁïôÔºàÁúãËµ∑‰æÜÊúâÊ∏õÁ¢≥ÊåáÊ®ôÔºâ
        legacy_action = {
            "Healthy": "Áõ£Ê∏¨Âç≥ÂèØ / Monitoring only",
            "Deadwood": "ÊñΩÁî®ËÖêÁîüÁúüËèå / Apply saprotrophic fungi",
            "Pest Damage": "ÊñΩÁî®ÊòÜËü≤ÁóÖÂéüÁúüËèå / Apply entomopathogenic fungi",
            "Soil Issue": "ÊñΩÁî®ËèåÊ†πÁúüËèå + Á∑©Ë°ùËôïÁêÜ / Apply mycorrhizal fungi + buffer"
        }[label_en]
        co2_map = {"Deadwood":25, "Pest Damage":20, "Soil Issue":15, "Healthy":0}
        co2_saved = co2_map[label_en]
        st.info(f"Legacy Action Tag / ËàäÁâàÂª∫Ë≠∞Ôºö**{legacy_action}**")
        st.metric("CO‚ÇÇ Reduction Potential / ÊΩõÂú®Ê∏õÁ¢≥", f"{co2_saved} kg")

        apply_now = st.checkbox("Apply treatment now (simulate) / Á´ãÂç≥Ê®°Êì¨ÊñΩ‰Ωú", value=False)

        if st.button("‚ûï Log this tree / Ë®òÈåÑÊ≠§Ê®π"):
            row = dict(
                timestamp=datetime.utcnow().isoformat(timespec="seconds"),
                reporter=reporter, city=city, district=district,
                tree_id=f"T-{np.random.randint(1000,9999)}",
                status_en=label_en, status_zh=label_zh, confidence=conf,
                diameter_cm=diameter, canopy_m=canopy_m,
                action_bi=f"{dose['agent_zh']}ÔΩú{dose['form']}",
                co2_saved_kg=co2_saved if apply_now else 0,
                treated=apply_now, treated_ts=datetime.utcnow().isoformat(timespec="seconds") if apply_now else "",
                lat=lat, lon=lon,
                species=species_name if species_mode.startswith("Special") else "(general)"
            )
            st.session_state.db = pd.concat([st.session_state.db, pd.DataFrame([row])], ignore_index=True)
            st.balloons()
            st.success("Logged successfully / Â∑≤Ë®òÈåÑÔºÅÂâçÂæÄÂú∞ÂúñËàáÂÑÄË°®ÊùøÊü•Áúã„ÄÇ")

# =========================================================
# TAB 2 ‚Äî Map View / Âú∞ÂúñÊ™¢Ë¶ñ
# =========================================================
with tabs[1]:
    st.header("üó∫Ô∏è Map View / Âú∞ÂúñÊ™¢Ë¶ñÔºàDemo Logs vs Live OSMÔºâ")

    mcol1, mcol2, mcol3 = st.columns([2, 2, 2])
    with mcol1:
        city_m = st.selectbox("City / ÂüéÂ∏ÇÔºàÂú∞ÂúñÔºâ", list(TAIWAN_DIVISIONS.keys()), index=2, key="map_city")
    with mcol2:
        district_m = st.selectbox("District / Ë°åÊîøÂçÄÔºàÂú∞ÂúñÔºâ", TAIWAN_DIVISIONS[city_m], key="map_dist")
    with mcol3:
        data_mode = st.radio("Data source / Ë≥áÊñô‰æÜÊ∫ê", ["Demo logs / Á§∫ÁØÑÁ¥ÄÈåÑ", "Live OSM / Âç≥ÊôÇOSM"], index=0)

    st.caption("NoteÔºöSystem analyzes all species; today‚Äôs case-study demo is Beitun street trees. / Êú¨Á≥ªÁµ±ÂèØÂàÜÊûêÊâÄÊúâÊ®πÁ®ÆÔºõÁ§∫ÁØÑË≥áÊñôÁÇ∫ÂåóÂ±ØË°åÈÅìÊ®πÊ°à‰æã„ÄÇ")
    
if species_mode.startswith("Specialization"):
    st.caption(f"üî¨ Specialization mode active: focusing on {species_name}")
else:
    st.caption("üåç General mode: analyzing all trees across Taiwan")
    
    # ‰∏ÄÈçµËºâÂÖ•ÂåóÂ±ØÁ§∫ÁØÑ
    if st.button("‚ö° Load Beitun demo tree lines / ËºâÂÖ•ÂåóÂ±ØÊ®πÂàóÁ§∫ÁØÑ"):
        demo_df = make_beitun_demo(n_per_line=80, seed=7)
        st.session_state.db = pd.concat([st.session_state.db, demo_df], ignore_index=True)
        st.success(f"Loaded / Â∑≤ËºâÂÖ•Ôºö{len(demo_df)} Á≠ÜÂåóÂ±ØÊ®πÂàóÁ§∫ÁØÑË≥áÊñô")

    bbox_m = get_bbox_for(city_m, district_m)
    c_lat = (bbox_m[0] + bbox_m[2]) / 2
    c_lon = (bbox_m[1] + bbox_m[3]) / 2

    m = folium.Map(location=[c_lat, c_lon], zoom_start=14, control_scale=True)
    add_tile_layers(m)

    # Demo logs layer
    logs = st.session_state.db.copy()
    if len(logs) and data_mode.startswith("Demo"):
        for _, r in logs.iterrows():
            if r["city"] != city_m or r["district"] != district_m:
                continue
            treated = bool(r.get("treated", False))
            color = ("green" if treated else
                     "orange" if r["status_en"] == "Pest Damage" else
                     "blue"   if r["status_en"] == "Healthy" else
                     "purple")
            popup = (
                f"{r['tree_id']} ‚Äî {r['status_zh']} / {r['status_en']} ({r['confidence']}%)<br>"
                f"Species Ê®πÁ®Æ: {r.get('species','-')}<br>"
                f"{r['action_bi']}<br>"
                f"CO‚ÇÇ: {r['co2_saved_kg']} kg<br>"
                f"Diameter ËÉ∏Âæë: {r.get('diameter_cm','-')} cm ¬∑ Canopy Ê®πÂÜ†: {r.get('canopy_m','-')} m"
            )
            folium.CircleMarker(
                [float(r.get("lat", c_lat)), float(r.get("lon", c_lon))],
                radius=7, color=color, fill=True, fill_color=color,
                popup=popup, tooltip="Logged tree / Â∑≤Ë®òÈåÑÊ®πÊú®"
            ).add_to(m)

    # Live OSM layer
    if data_mode.startswith("Live"):
        with st.spinner("Querying OpenStreetMap‚Ä¶ / Ê≠£Âú®Êü•Ë©¢ OSM‚Ä¶"):
            try:
                nodes, buildings = fetch_osm_trees_buildings(bbox_m)
                tree_group = folium.FeatureGroup(name="OSM Trees / OSM Ê®πÈªû").add_to(m)
                for n in nodes[:1000]:
                    folium.CircleMarker(
                        [float(n.lat), float(n.lon)], radius=4,
                        color="#2ecc71", fill=True, fill_color="#2ecc71",
                        tooltip="OSM tree / OSM Ê®πÈªû"
                    ).add_to(tree_group)
                bld_group = folium.FeatureGroup(name="OSM Buildings / OSM Âª∫Áâ©").add_to(m)
                for poly in buildings[:800]:
                    folium.Polygon(
                        locations=[(lat, lon) for (lat, lon) in poly],
                        color="#7f8c8d", weight=1, fill=True,
                        fill_color="#95a5a6", fill_opacity=0.4
                    ).add_to(bld_group)
            except Exception as e:
                st.error(f"OSM query failed / OSM ÈÄ£Á∑öÂ§±ÊïóÔºö{e}")

    st_folium(m, width=1000, height=620)

# =========================================================
# TAB 3 ‚Äî Dashboard / ÂÑÄË°®Êùø
# =========================================================
with tabs[2]:
    st.header("üìä Impact Dashboard / ÂΩ±ÈüøÂÑÄË°®Êùø")

    df = st.session_state.db.copy()
    if len(df):
        total_co2 = float(df["co2_saved_kg"].sum())
        treated_rate = (df["treated"] == True).mean() * 100

        c1, c2, c3 = st.columns(3)
        c1.metric("Total Reports / ÂõûÂ†±Á∏ΩÊï∏", len(df))
        c2.metric("Total CO‚ÇÇ Saved / Ê∏õÁ¢≥Á∏ΩÈáè", f"{total_co2:.1f} kg")
        c3.metric("Trees Treated / Â∑≤ËôïÁΩÆÊØî‰æã", f"{treated_rate:.1f}%")

        if "timestamp" in df.columns:
            ts = df.assign(day=pd.to_datetime(df["timestamp"]).dt.date).groupby("day")["co2_saved_kg"].sum()
            st.line_chart(ts, height=180)

        st.write("### Top Actions / ÊúÄÂ∏∏Ë¶ãËôïÁΩÆ")
        st.write(df["action_bi"].value_counts())

        # ÂéüÂûãË®ìÁ∑¥Êõ≤Á∑öÔºàÁ§∫ÁØÑÁî®Ôºâ
        epochs = np.arange(1, 31)
        train_acc = 0.82 + 0.18 * (1 - np.exp(-0.25 * epochs)) + np.random.normal(0, 0.002, len(epochs))
        val_acc   = 0.80 + 0.17 * (1 - np.exp(-0.22 * epochs)) + np.random.normal(0, 0.003, len(epochs))
        train_loss = 0.45 * np.exp(-0.23 * epochs) + 0.05 + np.random.normal(0, 0.003, len(epochs))
        val_loss   = 0.48 * np.exp(-0.20 * epochs) + 0.06 + np.random.normal(0, 0.004, len(epochs))

        fig = go.Figure()
        fig.add_trace(go.Scatter(x=epochs, y=train_acc*100, name="Train Acc Ë®ìÁ∑¥Ê∫ñÁ¢∫", line=dict(color="green")))
        fig.add_trace(go.Scatter(x=epochs, y=val_acc*100,   name="Val Acc È©óË≠âÊ∫ñÁ¢∫",   line=dict(color="orange", dash="dot")))
        fig.add_trace(go.Scatter(x=epochs, y=train_loss*100, name="Train Loss Ë®ìÁ∑¥ÊêçÂ§±", line=dict(color="blue", dash="dash")))
        fig.add_trace(go.Scatter(x=epochs, y=val_loss*100,   name="Val Loss È©óË≠âÊêçÂ§±",   line=dict(color="red", dash="dashdot")))
        fig.update_layout(title="AI Model Training Progress / Ê®°ÂûãË®ìÁ∑¥Ë∂®Âã¢",
                          xaxis_title="Epoch / ‰∏ñ‰ª£", yaxis_title="Metric (%)",
                          yaxis_range=[0, 100], template="plotly_white")
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("No data yet ‚Äî analyze an image to start / Â∞öÁÑ°Ë≥áÊñôÔºåË´ãÂÖàÊñºÂΩ±ÂÉèÂàÜÊûê‰∏äÂÇ≥‰∏¶Ë®òÈåÑ„ÄÇ")

# =========================================================
# TAB 4 ‚Äî Government Summary / ÊîøÂ∫úÁ´ØÁ∏ΩË¶Ω
# =========================================================
with tabs[3]:
    st.header("üèõÔ∏è Government Summary / ÊîøÂ∫úÁ´ØÁ∏ΩË¶Ω")
    if len(st.session_state.db):
        st.dataframe(st.session_state.db.tail(500), use_container_width=True)
    else:
        st.info("No citizen reports submitted yet / Â∞öÊú™ÊúâÂÖ¨Ê∞ëÂõûÂ†±Ë≥áÊñô„ÄÇ")
